name: Version

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  delivery:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure we fetch all history and tags cows

      - name: Get Current Version
        id: current_version
        run: |
          git fetch --tags  # Fetch tags to ensure the latest one is available
          VERSION=$(git describe --tags --abbrev=0)
          echo "Current Version: $VERSION"
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Bump Version Based on Commit
        id: version_bump
        run: |
          VERSION="${{ env.CURRENT_VERSION }}"
          # Check for commit message patterns and bump version accordingly
          if git log -1 --pretty=%B | grep -q "Major:"; then
            VERSION=$(echo $VERSION | awk -F. '{$1++;$2=0;$3=0}1' | sed 's/ /./g')
          elif git log -1 --pretty=%B | grep -q "Minor:"; then
            VERSION=$(echo $VERSION | awk -F. '{$2++;$3=0}1' | sed 's/ /./g')
          elif git log -1 --pretty=%B | grep -q "Patch:"; then
            VERSION=$(echo $VERSION | awk -F. '{$3++;}1' | sed 's/ /./g')
          fi
          echo "New Version: $VERSION"
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"  # Push the new tag to GitHub

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.NEW_VERSION }}"
          name: "${{ env.NEW_VERSION }}"
          generateReleaseNotes: true
          body: |
            ðŸš€ This release includes the following container images:
            https://ghcr.io/${{ github.repository }}:v${{ env.NEW_VERSION }}
          makeLatest: legacy
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

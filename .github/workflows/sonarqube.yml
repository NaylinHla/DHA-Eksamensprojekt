name: Mutation Testing & SonarQube Analysis

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  mutation_testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-stryker

      - name: Run Unit Tests with Coverage
        run: dotnet test server/Startup.Tests --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate Code Coverage Report
        run: |
          reportgenerator \
            -reports:TestResults/**/coverage.cobertura.xml \
            -targetdir:coverage-report \
            -reporttypes:SonarQube
          
      - name: Cache Stryker Baseline
        uses: actions/cache@v3
        with:
          path: server/Startup.Tests/StrykerOutput/baseline
          key: ${{ runner.os }}-stryker-baseline-${{ hashFiles('**/*.cs') }}
          restore-keys: |
            ${{ runner.os }}-stryker-baseline-

      - name: Clean Stryker temp and config
        run: |
          rm -f stryker-config.json
          rm -rf .stryker-tmp
        working-directory: server/Startup.Tests

      - name: Generate Stryker Config
        run: |
          cat <<EOF > stryker-config.json
          {
            "stryker-config": {
              "thresholds": {
                "break": 80
              },
              "coverage-analysis": "perTest",
              "baseline": {
                "enabled": true
              },
              "since": {
                "enabled": false
              },
              "project-info": {
                "version": "${{ github.sha }}"
              }
            }
          }
          EOF
        working-directory: server/Startup.Tests

      - name: Print Stryker Config
        run: cat stryker-config.json
        working-directory: server/Startup.Tests
      
      
      - name: Run Mutation Tests (Stryker)
        run: dotnet stryker --git-diff-target=HEAD
        working-directory: server/Startup.Tests
        continue-on-error: true

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: server/coverage-report

      - name: Upload Stryker Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-report
          path: server/Startup.Tests/StrykerOutput
  
  
  sonarqube:
    name: SonarQube Analysis
    needs: mutation_testing
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: server
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-sonarscanner


      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"${{ secrets.SONARQUBE_PROJECT_KEY }}" \
            /d:sonar.host.url="${{ vars.SONARQUBE_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}" \
            /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
            /d:sonar.coverage.sources=Startup \
            /d:sonar.coverage.exclusions="client/**,**/**/Program.cs" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300

      - name: Build
        run: dotnet build Startup

      - name: Complete Static Code Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}"
name: Coverage Testing & SonarQube Analysis

on:
  workflow_dispatch:
  pull_request:

jobs:
  coverage_testing:
    name: Coverage Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Run Unit Tests with Coverage
        run: dotnet test server/Startup.Tests --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate Code Coverage Report
        run: |
          reportgenerator \
            -reports:TestResults/**/coverage.cobertura.xml \
            -targetdir:server/coverage-report \
            -reporttypes:SonarQube

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: server/coverage-report
  
  
  sonarqube:
    name: SonarQube Analysis
    needs: coverage_testing
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: server
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-sonarscanner


      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: server/coverage-report

      - name: Normalize paths in coverage report
        run: |
          find coverage-report -name "SonarQube.xml" -exec sed -i 's|/home/runner/work/.*/server/||g' {} +

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"${{ secrets.SONARQUBE_PROJECT_KEY }}" \
            /d:sonar.host.url="${{ vars.SONARQUBE_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}" \
            /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
            /d:sonar.coverage.sources=Startup \
            /d:sonar.coverage.exclusions="\
            **/Program.cs,\
            Application/Models/**,\
            Application/Interfaces/**,\
            Core.Domain/Entities/**,\
            Infrastructure.Postgres.Scaffolding/**,\
            Application/Extensions.cs,\
            Infrastructure.Postgres/Extensions.cs" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.qualitygate.timeout=300

      - name: Build
        run: dotnet build Startup

      - name: Complete Static Code Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONARQUBE_TOKEN }}"